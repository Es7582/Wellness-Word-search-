<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Wellness Word Search</title>
  <style>
    table {
      border-collapse: collapse;
      margin-bottom: 20px;
    }
    td {
      width: 30px;
      height: 30px;
      text-align: center;
      border: 1px solid #ccc;
      cursor: pointer;
      font-weight: bold;
      font-family: sans-serif;
      user-select: none;
    }
    .selected {
      background-color: lightblue;
    }
    .found {
      background-color: lightgreen;
      text-decoration: line-through;
    }
    #word-list li.found-word {
      color: gray;
      text-decoration: line-through;
    }
  </style>
</head>
<body>
  <h1>Wellness Word Search</h1>
  <table id="grid"></table>
  <h2>Words to Find</h2>
  <ul id="word-list">
    <li>WELLBEING</li>
    <li>RESILIENCE</li>
    <li>TRUST</li>
    <li>REST</li>
    <li>STRENGTHS</li>
    <li>FEEDBACK</li>
    <li>ENGAGEMENT</li>
    <li>CUSTOMER</li>
    <li>POSITIVE</li>
    <li>REPAIR</li>
    <li>MAINTENANCE</li>
    <li>ANCHOR</li>
    <li>DOWNTIME</li>
    <li>BOUNDARIES</li>
    <li>SAFETY</li>
    <li>ENERGY</li>
  </ul>

  <script>
    // 15x15 grid data
    const gridData = [
      ['W','E','L','L','B','E','I','N','G','Z','R','E','S','T','A'],
      ['O','X','T','R','U','S','T','P','Q','S','E','N','E','R','G'],
      ['M','A','I','N','T','E','N','A','N','C','E','S','A','F','E'],
      ['P','O','S','I','T','I','V','E','L','B','O','U','N','D','A'],
      ['R','E','S','I','L','I','E','N','C','E','A','U','T','H','E'],
      ['E','N','G','A','G','E','M','E','N','T','S','T','R','E','N'],
      ['A','N','C','H','O','R','F','E','E','D','B','A','C','K','S'],
      ['S','E','L','F','A','W','A','R','E','N','E','S','S','D','O'],
      ['C','U','S','T','O','M','E','R','Q','U','R','A','I','R','P'],
      ['B','O','U','N','D','A','R','I','E','S','R','E','P','A','I'],
      ['D','O','W','N','T','I','M','E','S','T','R','E','N','G','T'],
      ['S','T','R','E','N','G','T','H','S','A','F','E','T','Y','U'],
      ['A','C','C','O','U','N','T','A','B','I','L','I','T','Y','V'],
      ['E','N','E','R','G','Y','M','A','I','N','T','E','N','A','N'],
      ['R','E','S','T','P','O','S','I','T','I','V','E','H','E','L']
    ];
    const words = [
      'WELLBEING','RESILIENCE','TRUST','REST','STRENGTHS','FEEDBACK',
      'ENGAGEMENT','CUSTOMER','POSITIVE',
      'REPAIR','MAINTENANCE','ANCHOR','DOWNTIME','BOUNDARIES','SAFETY','ENERGY'
    ];
    const grid = document.getElementById('grid');
    const wordList = document.getElementById('word-list');
    let selected = [];
    let selecting = false;
    let startCell = null;

    // Render grid
    function renderGrid() {
      grid.innerHTML = '';
      gridData.forEach((row, y) => {
        const tr = document.createElement('tr');
        row.forEach((letter, x) => {
          const td = document.createElement('td');
          td.textContent = letter;
          td.dataset.x = x;
          td.dataset.y = y;
          tr.appendChild(td);
        });
        grid.appendChild(tr);
      });
    }

    renderGrid();

    function clearSelection() {
      selected.forEach(cell => cell.el.classList.remove('selected'));
      selected = [];
    }

    // Returns array of cell objects if in straight line, else null
    function getCellsInLine(x1, y1, x2, y2) {
      const dx = x2 - x1;
      const dy = y2 - y1;
      const len = Math.max(Math.abs(dx), Math.abs(dy));
      if (len === 0) return [getCell(x1, y1)];
      const stepX = dx === 0 ? 0 : dx / Math.abs(dx);
      const stepY = dy === 0 ? 0 : dy / Math.abs(dy);
      // Only horizontal, vertical, or perfect diagonal
      if (Math.abs(dx) !== 0 && Math.abs(dy) !== 0 && Math.abs(dx) !== Math.abs(dy)) return null;
      const cells = [];
      for (let i = 0; i <= len; i++) {
        const x = x1 + i * stepX;
        const y = y1 + i * stepY;
        const el = grid.rows[y]?.cells[x];
        if (!el) return null;
        cells.push({x, y, el});
      }
      return cells;
    }

    function getCell(x, y) {
      const el = grid.rows[y]?.cells[x];
      return el ? {x, y, el} : null;
    }

    grid.addEventListener('mousedown', function(e) {
      if (e.target.tagName === 'TD') {
        clearSelection();
        selecting = true;
        startCell = e.target;
        startCell.classList.add('selected');
        selected = [{x: +startCell.dataset.x, y: +startCell.dataset.y, el: startCell}];
      }
    });

    grid.addEventListener('mouseover', function(e) {
      if (selecting && e.target.tagName === 'TD' && startCell) {
        clearSelection();
        const endCell = e.target;
        const path = getCellsInLine(
          +startCell.dataset.x, +startCell.dataset.y,
          +endCell.dataset.x, +endCell.dataset.y
        );
        if (path) {
          selected = path;
          path.forEach(cell => cell.el.classList.add('selected'));
        }
      }
    });

    grid.addEventListener('mouseup', function(e) {
      if (selecting && selected.length > 1) {
        const word = selected.map(cell => cell.el.textContent).join('').toUpperCase();
        const reverse = selected.map(cell => cell.el.textContent).reverse().join('').toUpperCase();
        const matchedWord = words.find(w => w === word || w === reverse);

        if (matchedWord) {
          selected.forEach(cell => {
            cell.el.classList.add('found');
            cell.el.classList.remove('selected');
          });
          highlightWordInList(matchedWord);
        }
        clearSelection();
      }
      selecting = false;
      startCell = null;
    });

    document.addEventListener('mouseup', function() {
      if (selecting) {
        clearSelection();
        selecting = false;
        startCell = null;
      }
    });

    function highlightWordInList(word) {
      const items = wordList.querySelectorAll('li');
      items.forEach(item => {
        if (item.textContent.trim().replace(/\s+/g, '').toUpperCase() === word.replace(/\s+/g, '').toUpperCase()) {
          item.classList.add('found-word');
        }
      });
    }
  </script>
</body>
</html>
